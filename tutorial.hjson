{
	"code_raw": 
		'''
		// @errors: 1100
		type State = {};
		type MinimaxNode = {move: State, eval: number};

		// ---cut---
		function evaluate(state: State) {
			return Math.floor(Math.random() * 201) - 100;
		}

		function isTerminalState(state: State) {
			return Math.random() > 0.7 ? true : false;
		}

		function generateChildStates(state: State) {
			return [{}, {}];
		}

		function minimax(
			state: State,
			depth: number,
			maximizingPlayer: boolean,
			alpha: number,
			beta: number
		): MinimaxNode {
			if (depth === 0 || isTerminalState(state)) {
				return {move: state, eval: evaluate(state)}
			}
			
			if (maximizingPlayer) {
				let maxEval = -Infinity;
				let bestMove!: State;
				
				for (let childState of generateChildStates(state)) {
					let {eval} = minimax(childState, depth - 1, false, alpha, beta);
					
					if (eval > maxEval) {
						maxEval = eval;
						bestMove = childState;
					}
					
					alpha = Math.max(alpha, eval);
					if (beta <= alpha) break;
				}
				
				return {move: bestMove, eval: maxEval};
			} else {
				let minEval = Infinity;
				let bestMove!: State;
				
				for (let childState of generateChildStates(state)) {
					let {eval} = minimax(childState, depth - 1, true, alpha, beta);
					
					if (eval < minEval) {
						minEval = eval;
						bestMove = childState;
					}
					
					beta = Math.min(beta, eval);
					if (beta <= alpha) break;
				}
				
				return {move: bestMove, eval: minEval};
			}
		}
		'''
	"evaluate_wrapper": [1, 3]
	"evaluate": [2]
	"terminal_wrapper": [4, 5, 7]
	"terminal": [6]
	"children_wrapper": [8, 9, 11]
	"children": [10]
	"main_wrapper": [12, 13, 14, 15, 16, 17, 18, 19, 59]
	"exit_block": [20, 21, 22, 23]
	"if_stmt": [24, 41, 58]

	"maximizing_initvals": [25, 26]
	"maximizing_loop": [27, 28, 38]
	"maximizing_logic": [29, 30, 31, 32, 33, 34]
	"maximizing_alphabeta": [35, 36, 37]
	"maximizing_return": [39, 40]

	"minimizing_initvals": [42, 43]
	"minimizing_loop": [44, 45, 55]
	"minimizing_logic": [46, 47, 48, 49, 50, 51]
	"minimizing_alphabeta": [52, 53, 54]
	"minimizing_return": [56, 57]

	"instructions": [
		"Welcome to the minimax tutorial! In this tutorial, you will learn how to create your own version of the minimax algorithm, along with alpha-beta pruning"
		[
			"Before we write the function, there are some prerequisites."
		]
		[
			"First one is the evaluate function, which takes a game board and evaluates how good that position is based on some heuristic"
			"push 0 evaluate_wrapper"
		]
		[
			"For our example, we will write a dummy evaluator. In real code you should replace this with an actual evaluator"
			"push 1 evaluate"
		]
		[
			"The next prerequisite is a function to check if our game is over. When the game is over, we should stop checking further game positions."
			"push 3 terminal_wrapper"
		]
		[
			"Once again, we write a dummy function"
			"push 5 terminal"
		]
	]
}
